[{"R:\\advancedchatappfrontend\\src\\index.js":"1","R:\\advancedchatappfrontend\\src\\App.js":"2","R:\\advancedchatappfrontend\\src\\store\\store.js":"3","R:\\advancedchatappfrontend\\src\\store\\rootReducer.js":"4","R:\\advancedchatappfrontend\\src\\lib\\auth\\action.js":"5","R:\\advancedchatappfrontend\\src\\lib\\auth\\actionTypes.js":"6","R:\\advancedchatappfrontend\\src\\lib\\helpers\\actionHandlers.js":"7","R:\\advancedchatappfrontend\\src\\lib\\utils\\headers.js":"8","R:\\advancedchatappfrontend\\src\\lib\\auth\\reducer.js":"9","R:\\advancedchatappfrontend\\src\\lib\\loading\\action.js":"10","R:\\advancedchatappfrontend\\src\\lib\\loading\\isLoggedAction.js":"11","R:\\advancedchatappfrontend\\src\\screens\\authorization\\register\\index.jsx":"12","R:\\advancedchatappfrontend\\src\\screens\\authorization\\action.js":"13","R:\\advancedchatappfrontend\\src\\screens\\authorization\\actionTypes.js":"14","R:\\advancedchatappfrontend\\src\\screens\\authorization\\reducer.js":"15","R:\\advancedchatappfrontend\\src\\screens\\authorization\\login\\index.jsx":"16","R:\\advancedchatappfrontend\\src\\screens\\dashboard\\index.jsx":"17","R:\\advancedchatappfrontend\\src\\components\\userCard\\index.jsx":"18","R:\\advancedchatappfrontend\\src\\components\\profileHeader\\index.jsx":"19","R:\\advancedchatappfrontend\\src\\components\\messageInput\\index.jsx":"20","R:\\advancedchatappfrontend\\src\\components\\myProfileHeader\\index.jsx":"21","R:\\advancedchatappfrontend\\src\\serviceWorker.js":"22","R:\\advancedchatappfrontend\\src\\components\\modals\\friendRequest\\index.jsx":"23","R:\\advancedchatappfrontend\\src\\contexts\\SocketContext.js":"24","R:\\advancedchatappfrontend\\src\\components\\drawers\\notifications\\index.jsx":"25","R:\\advancedchatappfrontend\\src\\components\\friendRequestBox\\index.jsx":"26","R:\\advancedchatappfrontend\\src\\components\\drawers\\editProfile\\index.jsx":"27","R:\\advancedchatappfrontend\\src\\components\\drawers\\changePassword\\index.jsx":"28","R:\\advancedchatappfrontend\\src\\lib\\firebase\\index.js":"29","R:\\advancedchatappfrontend\\src\\images\\index.js":"30","R:\\advancedchatappfrontend\\src\\screens\\dashboard\\reducer.js":"31","R:\\advancedchatappfrontend\\src\\screens\\dashboard\\actionTypes.js":"32","R:\\advancedchatappfrontend\\src\\screens\\dashboard\\action.js":"33","R:\\advancedchatappfrontend\\src\\components\\chatBubble\\index.jsx":"34","R:\\advancedchatappfrontend\\src\\components\\drawers\\editProfile\\freindDrawer.jsx":"35","R:\\advancedchatappfrontend\\src\\screens\\errorPage\\index.jsx":"36","R:\\advancedchatappfrontend\\src\\components\\routes\\PrivateRoute\\index.jsx":"37","R:\\advancedchatappfrontend\\src\\components\\routes\\PublicRoute\\index.jsx":"38","R:\\advancedchatappfrontend\\src\\components\\Skeltons\\myheaderSkelton.jsx":"39","R:\\advancedchatappfrontend\\src\\components\\Skeltons\\chatRoom.jsx":"40","R:\\advancedchatappfrontend\\src\\components\\Skeltons\\userCard.jsx":"41","R:\\advancedchatappfrontend\\src\\components\\Skeltons\\ProfileHeader.jsx":"42","R:\\advancedchatappfrontend\\src\\screens\\authorization\\resetPassword\\index.jsx":"43"},{"size":534,"mtime":1611473318488,"results":"44","hashOfConfig":"45"},{"size":1768,"mtime":1611650636726,"results":"46","hashOfConfig":"45"},{"size":459,"mtime":1610301167032,"results":"47","hashOfConfig":"45"},{"size":536,"mtime":1611484975823,"results":"48","hashOfConfig":"45"},{"size":994,"mtime":1611657971443,"results":"49","hashOfConfig":"45"},{"size":191,"mtime":1610134662800,"results":"50","hashOfConfig":"45"},{"size":971,"mtime":1611486376332,"results":"51","hashOfConfig":"45"},{"size":217,"mtime":1610197439842,"results":"52","hashOfConfig":"45"},{"size":726,"mtime":1610298866038,"results":"53","hashOfConfig":"45"},{"size":980,"mtime":1611486360382,"results":"54","hashOfConfig":"45"},{"size":469,"mtime":1610268994878,"results":"55","hashOfConfig":"45"},{"size":8410,"mtime":1611650578154,"results":"56","hashOfConfig":"45"},{"size":6021,"mtime":1611664402690,"results":"57","hashOfConfig":"45"},{"size":1195,"mtime":1611597977943,"results":"58","hashOfConfig":"45"},{"size":1301,"mtime":1611598008491,"results":"59","hashOfConfig":"45"},{"size":2580,"mtime":1611501223428,"results":"60","hashOfConfig":"45"},{"size":5001,"mtime":1611764093773,"results":"61","hashOfConfig":"45"},{"size":1374,"mtime":1611650529657,"results":"62","hashOfConfig":"45"},{"size":2202,"mtime":1611648648620,"results":"63","hashOfConfig":"45"},{"size":4065,"mtime":1611745871401,"results":"64","hashOfConfig":"45"},{"size":4189,"mtime":1611650583147,"results":"65","hashOfConfig":"45"},{"size":5182,"mtime":1610648081998,"results":"66","hashOfConfig":"45"},{"size":3081,"mtime":1611647998730,"results":"67","hashOfConfig":"45"},{"size":109,"mtime":1610726238467,"results":"68","hashOfConfig":"45"},{"size":1234,"mtime":1611645971755,"results":"69","hashOfConfig":"45"},{"size":1229,"mtime":1611650590377,"results":"70","hashOfConfig":"45"},{"size":6025,"mtime":1611645922469,"results":"71","hashOfConfig":"45"},{"size":5078,"mtime":1611645876696,"results":"72","hashOfConfig":"45"},{"size":515,"mtime":1610882134710,"results":"73","hashOfConfig":"45"},{"size":59,"mtime":1610894593459,"results":"74","hashOfConfig":"45"},{"size":1144,"mtime":1611506463874,"results":"75","hashOfConfig":"45"},{"size":730,"mtime":1611506445152,"results":"76","hashOfConfig":"45"},{"size":2701,"mtime":1611657986723,"results":"77","hashOfConfig":"45"},{"size":557,"mtime":1611650598629,"results":"78","hashOfConfig":"45"},{"size":1868,"mtime":1611645940650,"results":"79","hashOfConfig":"45"},{"size":468,"mtime":1611493942071,"results":"80","hashOfConfig":"45"},{"size":456,"mtime":1611478701618,"results":"81","hashOfConfig":"45"},{"size":337,"mtime":1611477730809,"results":"82","hashOfConfig":"45"},{"size":602,"mtime":1611491173374,"results":"83","hashOfConfig":"45"},{"size":1533,"mtime":1611487259529,"results":"84","hashOfConfig":"45"},{"size":1131,"mtime":1611492826328,"results":"85","hashOfConfig":"45"},{"size":607,"mtime":1611489613777,"results":"86","hashOfConfig":"45"},{"size":8599,"mtime":1611650574330,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"vlv5y4",{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"90"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"90"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"90"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"90"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"90"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"90"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"90"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"90"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"90"},"R:\\advancedchatappfrontend\\src\\index.js",[],["191","192"],"R:\\advancedchatappfrontend\\src\\App.js",["193"],"import React, { useEffect } from \"react\";\nimport { Switch } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getUserDetails } from \"./lib/auth/action\";\nimport DashBoard from \"./screens/dashboard/index\";\nimport Login from \"./screens/authorization/login/index\";\nimport Register from \"./screens/authorization/register/index\";\nimport ErrorPage from \"./screens/errorPage/index\";\nimport ResetPassword from \"./screens/authorization/resetPassword/index\";\nimport PrivateRoute from \"./components/routes/PrivateRoute/index\";\nimport PublicRoute from \"./components/routes/PublicRoute/index\";\nimport { logoutUser } from \"./screens/authorization/action\";\nimport PropTypes from \"prop-types\";\nimport \"./App.css\";\n\nconst App = ({ getUserDetails, isLogged }) => {\n  useEffect(() => {\n    const getData = async () => {\n      await getUserDetails();\n    };\n    getData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Switch>\n      <PrivateRoute\n        isLogged={isLogged}\n        restricted\n        path=\"/login\"\n        component={Login}\n        exact\n      />\n      <PrivateRoute\n        isLogged={isLogged}\n        restricted\n        path=\"/register\"\n        component={Register}\n        exact\n      />\n      <PrivateRoute\n        isLogged={isLogged}\n        restricted\n        path=\"/resetpassword\"\n        component={ResetPassword}\n        exact\n      />\n      <PublicRoute\n        component={DashBoard}\n        isLogged={isLogged}\n        restricted\n        path=\"/\"\n        exact\n      />\n      <PrivateRoute component={ErrorPage} />\n    </Switch>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  isLogged: state.isLogged.isLogged,\n});\n\nexport default connect(mapStateToProps, { getUserDetails, logoutUser })(App);\n","R:\\advancedchatappfrontend\\src\\store\\store.js",["194"],"import { applyMiddleware, createStore } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport rootReducer from './rootReducer';\r\n\r\nexport default function configureStore() {\r\n    \r\n  const loggerMiddleware = createLogger();\r\n  const middlewares = [thunkMiddleware];\r\n  const middleWare = applyMiddleware(...middlewares);\r\n\r\n  const store = createStore(rootReducer, middleWare);\r\n\r\n  return store;\r\n}\r\n","R:\\advancedchatappfrontend\\src\\store\\rootReducer.js",[],"R:\\advancedchatappfrontend\\src\\lib\\auth\\action.js",[],"R:\\advancedchatappfrontend\\src\\lib\\auth\\actionTypes.js",[],"R:\\advancedchatappfrontend\\src\\lib\\helpers\\actionHandlers.js",[],"R:\\advancedchatappfrontend\\src\\lib\\utils\\headers.js",[],"R:\\advancedchatappfrontend\\src\\lib\\auth\\reducer.js",[],"R:\\advancedchatappfrontend\\src\\lib\\loading\\action.js",[],"R:\\advancedchatappfrontend\\src\\lib\\loading\\isLoggedAction.js",[],"R:\\advancedchatappfrontend\\src\\screens\\authorization\\register\\index.jsx",["195","196","197"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./index.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { Form, Input, Button, Spin, message, Modal } from \"antd\";\r\nimport { LoadingOutlined, UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport Recaptcha from \"react-recaptcha\";\r\nimport { registerUser, checkAvailable, sendEmailOtp } from \"../action\";\r\nimport { getUserDetails } from \"../../../lib/auth/action\";\r\n\r\nconst regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\nconst Register = ({\r\n  registerUser,\r\n  isLoading,\r\n  registerStatus,\r\n  getUserDetails,\r\n  checkAvailable,\r\n  checkEmailStatus,\r\n  sendEmailOtp,\r\n  sendEmailOtpData,\r\n}) => {\r\n  const [showLoading, setShowLoading] = useState(true);\r\n  const [isRecaptcha, setIsRecaptcha] = useState(false);\r\n\r\n  const [formData, setFormData] = useState(null);\r\n  const [otpModal, setOtpModal] = useState(false);\r\n\r\n  const [curOtp, setCurOtp] = useState(\"\");\r\n\r\n  const otpField = useRef();\r\n\r\n  const antIcon = <LoadingOutlined style={{ fontSize: 40 }} spin />;\r\n\r\n  const reCaptchaHandler = (response) => {\r\n    if (response) {\r\n      setIsRecaptcha(true);\r\n    }\r\n  };\r\n\r\n  const hashCode = (s) => {\r\n    return s.split(\"\").reduce(function (a, b) {\r\n      a = (a << 5) - a + b.charCodeAt(0);\r\n      return a & a;\r\n    }, 0);\r\n  };\r\n\r\n  const submitHandler = async (values) => {\r\n    const userData = values;\r\n    delete userData[\"verification\"];\r\n    setFormData(userData);\r\n    setOtpModal(true);\r\n    await sendEmailOtp({ email: userData.email });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (sendEmailOtpData?.data?.success && otpModal) {\r\n      message.success(`One Time Password Send to ${formData.email}`, 3);\r\n      setCurOtp(sendEmailOtpData?.data?.data?.OTP);\r\n    }\r\n  }, [sendEmailOtpData]);\r\n\r\n  useEffect(() => {\r\n    if (otpModal) {\r\n      otpField.current.focus();\r\n    }\r\n  }, [otpModal]);\r\n\r\n  const validateEmail = (email) => {\r\n    return regex.test(String(email).toLowerCase());\r\n  };\r\n\r\n  const checkAvailableHandler = async (event) => {\r\n    await checkAvailable({ email: event.target.value });\r\n  };\r\n\r\n  const registerSubmitHandler = async () => {\r\n    const otpEntered = otpField.current.state.value;\r\n    if (!otpEntered || !otpEntered.length) {\r\n      message.error(\"Please Enter your One-Time Password\");\r\n    } else if (hashCode(otpEntered) !== curOtp) {\r\n      message.error(\"Entered One-Time Password is Wrong, Try again\");\r\n    } else if (hashCode(otpEntered) === curOtp) {\r\n      await registerUser(formData);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const storeLocal = async () => {\r\n      await getUserDetails();\r\n    };\r\n    if (registerStatus.error) {\r\n      message.error(`User with same E-mail already Exists`, 3);\r\n    } else if (registerStatus?.data?.success) {\r\n      storeLocal();\r\n    }\r\n  }, [registerStatus]);\r\n\r\n  return isLoading ? (\r\n    <div className=\"centerForm\">\r\n      <Spin indicator={<LoadingOutlined style={{ fontSize: 100 }} size />} />\r\n    </div>\r\n  ) : (\r\n    <>\r\n      {otpModal && (\r\n        <Modal\r\n          className=\"registerModal\"\r\n          footer={null}\r\n          visible={otpModal}\r\n          onCancel={() => setOtpModal(false)}\r\n        >\r\n          {sendEmailOtpData?.loading ? (\r\n            <div className=\"centerAlign\">\r\n              <Spin\r\n                indicator={<LoadingOutlined style={{ fontSize: 30 }} size />}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <Input\r\n                placeholder=\"Enter 6-digit OTP\"\r\n                bordered={false}\r\n                maxLength={6}\r\n                ref={otpField}\r\n              />\r\n              <Button\r\n                onClick={registerSubmitHandler}\r\n                className=\"btn\"\r\n                type=\"primary\"\r\n              >\r\n                Submit\r\n              </Button>\r\n            </>\r\n          )}\r\n        </Modal>\r\n      )}\r\n      <div className=\"centerForm\">\r\n        <Form\r\n          onFinish={submitHandler}\r\n          name=\"normal_login\"\r\n          className=\"login-form\"\r\n          scrollToFirstError\r\n        >\r\n          <Form.Item\r\n            name=\"email\"\r\n            rules={[\r\n              () => ({\r\n                async validator(_, value) {\r\n                  if (!value) {\r\n                    return Promise.reject(\"Please input your E-mail!\");\r\n                  } else if (!validateEmail(value)) {\r\n                    return Promise.reject(\"The input is not valid E-mail!\");\r\n                  } else if (checkEmailStatus?.data?.isAvailable) {\r\n                    return Promise.reject(\r\n                      \"Email Already Exists, Try with another\"\r\n                    );\r\n                  }\r\n                  return Promise.resolve();\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Email\"\r\n              onBlur={(event) => checkAvailableHandler(event)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"name\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input your name!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Full Name\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"password\"\r\n            rules={[\r\n              () => ({\r\n                validator(_, value) {\r\n                  if (!value) {\r\n                    return Promise.reject(\"Please input your Password!\");\r\n                  }\r\n                  if (value.length < 6) {\r\n                    return Promise.reject(\r\n                      \"Minimum length of password must be 6\"\r\n                    );\r\n                  }\r\n                  if (\r\n                    value.length > 0 &&\r\n                    (value[0] === \" \" || value[value.length - 1] === \" \")\r\n                  ) {\r\n                    return Promise.reject(\r\n                      \"Password cannot start or end with spaces\"\r\n                    );\r\n                  }\r\n                  return Promise.resolve();\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            className=\"recaptcha_field\"\r\n            name=\"verification\"\r\n            rules={[\r\n              () => ({\r\n                validator() {\r\n                  if (!isRecaptcha) {\r\n                    return Promise.reject(\"Please complete the Recaptcha\");\r\n                  } else {\r\n                    return Promise.resolve();\r\n                  }\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <div className={showLoading ? \"hidden\" : \"notHidden\"}>\r\n              <Recaptcha\r\n                sitekey=\"6LdcnicaAAAAAIDwoy9gRKOcn2KmwzWK1lIKBeIC\"\r\n                render=\"explicit\"\r\n                verifyCallback={reCaptchaHandler}\r\n                expiredCallback={() => setIsRecaptcha(false)}\r\n                onloadCallback={() => setShowLoading(false)}\r\n              />\r\n            </div>\r\n            {showLoading && <Spin className=\"spinner\" indicator={antIcon} />}\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              className=\"login-form-button btn\"\r\n            >\r\n              Create Account\r\n            </Button>\r\n            Or <NavLink to=\"/login\">login</NavLink>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  registerStatus: state.authentication.registerUser,\r\n  isLoading: state.setLoader.isLoading,\r\n  checkEmailStatus: state.authentication.checkAvailable.data,\r\n  sendEmailOtpData: state.authentication.sendEmailOtp,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  registerUser,\r\n  getUserDetails,\r\n  checkAvailable,\r\n  sendEmailOtp,\r\n  sendEmailOtp,\r\n})(Register);\r\n","R:\\advancedchatappfrontend\\src\\screens\\authorization\\action.js",[],"R:\\advancedchatappfrontend\\src\\screens\\authorization\\actionTypes.js",[],"R:\\advancedchatappfrontend\\src\\screens\\authorization\\reducer.js",[],"R:\\advancedchatappfrontend\\src\\screens\\authorization\\login\\index.jsx",["198"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./index.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { Form, Input, Button, message, Spin } from \"antd\";\r\nimport { UserOutlined, LockOutlined, LoadingOutlined } from \"@ant-design/icons\";\r\nimport { loginUser } from \"../action\";\r\nimport { getUserDetails } from \"../../../lib/auth/action\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Login = ({ loginStatus, loginUser, getUserDetails, isLoading }) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const handleSubmit = async (values) => {\r\n    setEmail(values.email);\r\n    await loginUser(values);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const storeLocal = async () => {\r\n      setEmail(\"\");\r\n      await getUserDetails();\r\n    };\r\n    if (loginStatus.error) {\r\n      message.error(`Wrong username or password`, 3);\r\n    } else if (loginStatus?.data?.success) {\r\n      storeLocal();\r\n    }\r\n  }, [loginStatus]);\r\n\r\n  const antIcon = <LoadingOutlined style={{ fontSize: 100 }} spin />;\r\n\r\n  return isLoading ? (\r\n    <div className=\"container\">\r\n      <Spin indicator={antIcon} />\r\n    </div>\r\n  ) : (\r\n    <div className=\"centerForm\">\r\n      <Form\r\n        name=\"normal_login\"\r\n        className=\"login-form-login\"\r\n        onFinish={handleSubmit}\r\n      >\r\n        <Form.Item\r\n          name=\"email\"\r\n          rules={[{ required: true, message: \"Please input your Username!\" }]}\r\n          initialValue={email}\r\n        >\r\n          <Input\r\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Email\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <NavLink to=\"/resetpassword\">Forgot password</NavLink>\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            className=\"login-form-button btn\"\r\n          >\r\n            Log in\r\n          </Button>\r\n          Or <NavLink to=\"/register\">register now!</NavLink>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  loginStatus: state.authentication.loginUser,\r\n  isLoading: state.setLoader.isLoading,\r\n});\r\n\r\nexport default connect(mapStateToProps, { loginUser, getUserDetails })(Login);\r\n","R:\\advancedchatappfrontend\\src\\screens\\dashboard\\index.jsx",["199","200","201","202","203","204","205"],"import React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\nimport \"./index.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { notification, message, Spin, Empty } from \"antd\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport socket from \"socket.io-client\";\r\nimport Card from \"../../components/userCard/index\";\r\nimport UserHeader from \"../../components/profileHeader/index\";\r\nimport MyProfileHeader from \"../../components/myProfileHeader/index\";\r\nimport MessageInput from \"../../components/messageInput/index\";\r\nimport SocketContext from \"../../contexts/SocketContext\";\r\nimport { getUserFriends } from \"./action\";\r\nimport Skelton from \"../../components/Skeltons/userCard\";\r\n\r\nconst io = socket(`https://advchatapp.herokuapp.com/`);\r\n\r\nconst openNotification = (message) => {\r\n  notification.info({\r\n    message: `${message}`,\r\n    placement: \"bottomRight\",\r\n  });\r\n};\r\n\r\nconst DashBoard = ({ getUserData, isLoading, getUserFriends, friendsData }) => {\r\n  const [curChat, setCurChat] = useState(-1);\r\n  const [skeltonLoading, setSkeltonLoading] = useState(true);\r\n  const [imageCounter, setImageCounter] = useState(0);\r\n  const [mWeb, setmWeb] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const event = () => {\r\n      setmWeb(window.innerWidth <= 767);\r\n    };\r\n    window.addEventListener(\"resize\", event);\r\n    setmWeb(window.innerWidth <= 767);\r\n    return () => window.removeEventListener(\"resize\", event);\r\n  }, [typeof window !== \"undefined\"]);\r\n\r\n  const music = new Audio(\"./message_tone.mp3\");\r\n\r\n  useEffect(() => {\r\n    message.success(`Welcome Back, ${getUserData?.data?.data?.name}`, 3);\r\n    io.on(\"refershFriends\", async () => {\r\n      await getUserFriends();\r\n      const { email, _id, name } = getUserData?.data?.data;\r\n      io.emit(\"join\", { email, _id, name });\r\n    });\r\n    return () =>\r\n      io.off(\"refershFriends\", async () => {\r\n        await getUserFriends();\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (imageCounter === friendsData?.data?.friendsList?.length) {\r\n      setSkeltonLoading(false);\r\n    }\r\n  }, [imageCounter]);\r\n\r\n  useEffect(() => {\r\n    io.on(\"notification\", async ({ message }) => {\r\n      music.play();\r\n      openNotification(message);\r\n    });\r\n    return () =>\r\n      io.off(\"notification\", async ({ message }) => {\r\n        music.play(message);\r\n        openNotification(message);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getFriends = async () => {\r\n      await getUserFriends();\r\n    };\r\n    if (getUserData?.data?.data?.email) {\r\n      if (!friendsData?.data?.friendsList) {\r\n        getFriends();\r\n      }\r\n      const { email, _id, name } = getUserData?.data?.data;\r\n      io.emit(\"join\", { email, _id, name });\r\n    }\r\n  }, [getUserData]);\r\n\r\n  return isLoading ? (\r\n    <div className=\"centerBox\">\r\n      <Spin indicator={<LoadingOutlined style={{ fontSize: 100 }} size />} />\r\n    </div>\r\n  ) : (\r\n    <SocketContext.Provider value={io}>\r\n      <div className=\"row\">\r\n        <div\r\n          className={\r\n            !mWeb\r\n              ? \"col col1\"\r\n              : curChat === -1\r\n              ? \"col col1 other\"\r\n              : \"col col1 mWeb\"\r\n          }\r\n        >\r\n          <div className=\"sticky\">\r\n            <MyProfileHeader\r\n              mWeb={mWeb}\r\n              showCount={friendsData?.data?.unmappedFriends?.length}\r\n              imageUrl={getUserData?.data?.data?.user_image}\r\n            />\r\n          </div>\r\n          {skeltonLoading && (\r\n            <div>\r\n              <Skelton />\r\n            </div>\r\n          )}\r\n          <div\r\n            style={{\r\n              visibility: skeltonLoading ? \"hidden\" : \"visible\",\r\n            }}\r\n            className=\"overflowContainer\"\r\n          >\r\n            {friendsData?.data?.friendsList?.map((item, index) => (\r\n              <Card\r\n                setCurChat={setCurChat}\r\n                isActive={curChat === item.roomId}\r\n                userData={item}\r\n                mWeb={mWeb}\r\n                curRoomId={curChat}\r\n                setImageCounter={setImageCounter}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={\r\n            !mWeb\r\n              ? \"col col2\"\r\n              : curChat === -1\r\n              ? \"col col2 mWeb\"\r\n              : \"col col2 other\"\r\n          }\r\n        >\r\n          {curChat === -1 ? (\r\n            <Empty style={{ margin: \"auto 0\" }} description={false} />\r\n          ) : (\r\n            <>\r\n              <UserHeader mWeb={mWeb} setCurChat={setCurChat} />\r\n              <MessageInput curUserEmail={getUserData?.data?.data?.email} />\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  getUserData: state.getUserDetails,\r\n  isLoading: state.setLoader.isLoading,\r\n  friendsData: state.dashBoard.getUserFriends.data,\r\n});\r\n\r\nexport default React.memo(\r\n  connect(mapStateToProps, { getUserFriends })(DashBoard)\r\n);\r\n","R:\\advancedchatappfrontend\\src\\components\\userCard\\index.jsx",["206"],"import React from \"react\";\r\nimport \"./index.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { getFriendData, roomChatData } from \"../../screens/dashboard/action\";\r\n\r\nconst userCard = ({\r\n  isActive,\r\n  curRoomId,\r\n  setCurChat,\r\n  userData,\r\n  getFriendData,\r\n  roomChatData,\r\n  setImageCounter,\r\n  mWeb,\r\n}) => {\r\n  const clickHandler = async (roomId, userId) => {\r\n    if (roomId === curRoomId) {\r\n      setCurChat(roomId);\r\n    } else {\r\n      setCurChat(roomId);\r\n      await Promise.all([getFriendData(userId), roomChatData(roomId)]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onClick={() => clickHandler(userData?.roomId, userData?.userId)}\r\n      className={\"containerCard\" + (isActive && !mWeb ? \" activecard\" : \"\")}\r\n    >\r\n      {/* // image  */}\r\n      <div className=\"card1\">\r\n        <img\r\n          size={55}\r\n          className=\"imgUserCard\"\r\n          onLoad={() => setImageCounter((prevState) => prevState + 1)}\r\n          src={userData?.user_image}\r\n        />\r\n      </div>\r\n      <div className=\"card2\">\r\n        <div className=\"detailsUp\">\r\n          <span>{userData?.name}</span>\r\n          {/* <span>8:43 PM</span> */}\r\n        </div>\r\n        <div className=\"message\">{/* <span>Hello Brother!</span> */}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, { getFriendData, roomChatData })(\r\n  React.memo(userCard)\r\n);\r\n","R:\\advancedchatappfrontend\\src\\components\\profileHeader\\index.jsx",["207"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Skeleton from \"../Skeltons/ProfileHeader\";\r\nimport { Button } from \"antd\";\r\nimport { LeftOutlined } from \"@ant-design/icons\";\r\nimport FreindProfile from \"../drawers/editProfile/freindDrawer\";\r\nimport \"./index.css\";\r\n\r\nconst ProfileHeader = ({ userInfo, setCurChat, mWeb }) => {\r\n  const [editProfileDrawer, setEditProfileDrawer] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userInfo?.isLoading) {\r\n      setIsLoading(true);\r\n    }\r\n  }, [userInfo]);\r\n\r\n  return (\r\n    <>\r\n      <FreindProfile\r\n        setEditProfileDrawer={setEditProfileDrawer}\r\n        editProfileDrawer={editProfileDrawer}\r\n        getUserData={userInfo?.data}\r\n        mWeb={mWeb}\r\n      />\r\n      <div className=\"headerContainerBox\">\r\n        {isLoading && (\r\n          <div className=\"containerBox skeltonProfile\">\r\n            <Skeleton />\r\n          </div>\r\n        )}\r\n        {mWeb && (\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              padding: '0 10px'\r\n            }}\r\n          >\r\n            <Button\r\n              onClick={() => setCurChat(-1)}\r\n              type=\"text\"\r\n              icon={<LeftOutlined />}\r\n            />\r\n          </div>\r\n        )}\r\n        <div\r\n          style={{ visibility: isLoading ? \"hidden\" : \"visible\" }}\r\n          onClick={() => setEditProfileDrawer(true)}\r\n          className=\"containerBox\"\r\n        >\r\n          <div>\r\n            <img\r\n              className=\"imgHead\"\r\n              size={55}\r\n              src={userInfo?.data?.data?.user_image}\r\n              onLoad={() => setIsLoading(false)}\r\n            />\r\n          </div>\r\n          <div className=\"userDetails\">\r\n            <div>\r\n              <span>{userInfo?.data?.data?.name}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  userInfo: state.dashBoard.getFriendData,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(React.memo(ProfileHeader));\r\n","R:\\advancedchatappfrontend\\src\\components\\messageInput\\index.jsx",["208","209"],"R:\\advancedchatappfrontend\\src\\components\\myProfileHeader\\index.jsx",["210","211","212","213"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./index.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { Avatar, Button, Dropdown, Menu } from \"antd\";\r\nimport { logoutUser } from \"../../screens/authorization/action\";\r\nimport Skeleton from \"../Skeltons/myheaderSkelton\";\r\nimport {\r\n  PlusOutlined,\r\n  MoreOutlined,\r\n  NotificationOutlined,\r\n  LogoutOutlined,\r\n  EyeInvisibleOutlined,\r\n  EditOutlined,\r\n} from \"@ant-design/icons\";\r\nimport RequestModal from \"../modals/friendRequest/index\";\r\nimport NotificationsDrawer from \"../drawers/notifications/index\";\r\nimport EditProfileDrawer from \"../drawers/editProfile/index\";\r\nimport ChangePasswordDrawer from \"../drawers/changePassword/index\";\r\nimport { isLogged } from \"../../lib/helpers/actionHandlers\";\r\n\r\nconst Header = ({ logoutUser, imageUrl, showCount, mWeb }) => {\r\n  const [notificationDrawer, setNotificationDrawer] = useState(false);\r\n  const [editProfileDrawer, setEditProfileDrawer] = useState(false);\r\n  const [changePasswordDrawer, setChangePasswordDrawer] = useState(false);\r\n  const [close, setClose] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const menuHandler = async (event) => {\r\n    if (event.key === \"3\") {\r\n      await logoutUser();\r\n      localStorage.removeItem(\"id_token\");\r\n    } else if (event.key === \"1\") {\r\n      setEditProfileDrawer(true);\r\n    } else if (event.key === \"2\") {\r\n      setChangePasswordDrawer(true);\r\n    }\r\n  };\r\n\r\n  const menu = (\r\n    <Menu onClick={(event) => menuHandler(event)}>\r\n      <Menu.Item style={{ fontSize: \"16px\" }} key=\"1\">\r\n        <EditOutlined /> My Profile\r\n      </Menu.Item>\r\n      <Menu.Item style={{ fontSize: \"16px\" }} key=\"2\">\r\n        <EyeInvisibleOutlined />\r\n        Change Password\r\n      </Menu.Item>\r\n      <Menu.Item style={{ fontSize: \"16px\" }} key=\"3\">\r\n        <LogoutOutlined /> Logout\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <NotificationsDrawer\r\n        setNotificationDrawer={setNotificationDrawer}\r\n        notificationDrawer={notificationDrawer}\r\n        mWeb={mWeb}\r\n      />\r\n      <EditProfileDrawer\r\n        setEditProfileDrawer={setEditProfileDrawer}\r\n        editProfileDrawer={editProfileDrawer}\r\n        mWeb={mWeb}\r\n      />\r\n      <ChangePasswordDrawer\r\n        setChangePasswordDrawer={setChangePasswordDrawer}\r\n        changePasswordDrawer={changePasswordDrawer}\r\n        mWeb={mWeb}\r\n      />\r\n      {close && <RequestModal setClose={setClose} />}\r\n      {isLoading && (\r\n        <div className=\"skeltonMyHeader\">\r\n          <Skeleton />\r\n        </div>\r\n      )}\r\n      <div\r\n        style={{ visibility: isLoading ? \"hidden\" : \"visible\" }}\r\n        className=\"containerMyBox\"\r\n      >\r\n        <div className=\"col1\">\r\n          <img\r\n            src={imageUrl}\r\n            className=\"imgHeader\"\r\n            onLoad={() => setIsLoading(false)}\r\n          />\r\n        </div>\r\n        <div className=\"editButtons\">\r\n          <Button\r\n            shape=\"circle\"\r\n            type=\"primary\"\r\n            icon={<NotificationOutlined />}\r\n            size={20}\r\n            onClick={() => setNotificationDrawer(true)}\r\n            style={{\r\n              margin: \"0 10px\",\r\n              cursor: \"pointer\",\r\n              position: \"relative\",\r\n            }}\r\n          >\r\n            {typeof showCount !== \"undefined\" && showCount > 0 && (\r\n              <div className=\"badge\">{showCount}</div>\r\n            )}\r\n          </Button>\r\n          <Button\r\n            shape=\"circle\"\r\n            type=\"primary\"\r\n            icon={<PlusOutlined />}\r\n            size={20}\r\n            onClick={() => setClose(true)}\r\n            style={{ margin: \"0 10px\", cursor: \"pointer\" }}\r\n          />\r\n          <Dropdown overlay={menu} placement=\"bottomRight\">\r\n            <Button\r\n              shape=\"circle\"\r\n              type=\"primary\"\r\n              icon={<MoreOutlined />}\r\n              size={20}\r\n              className=\"ant-dropdown-link\"\r\n              style={{ marginLeft: \"10px\", cursor: \"pointer\" }}\r\n            />\r\n          </Dropdown>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(connect(null, { logoutUser })(Header));\r\n","R:\\advancedchatappfrontend\\src\\serviceWorker.js",[],["214","215"],"R:\\advancedchatappfrontend\\src\\components\\modals\\friendRequest\\index.jsx",["216"],"import React, { useState, useEffect } from \"react\";\r\nimport { Modal, Form, Input, Button, Spin, message } from \"antd\";\r\nimport { UserOutlined, LoadingOutlined } from \"@ant-design/icons\";\r\nimport \"./index.css\";\r\nimport SocketContext from \"../../../contexts/SocketContext\";\r\n\r\n// addfriendresponse\r\n// addfriend\r\n\r\nconst Index = ({ setClose }) => {\r\n  const io = React.useContext(SocketContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    io.on(\"addfriendresponse\", ({ success, messageStatus }) => {\r\n      if (success) {\r\n        setClose(false);\r\n        message.success(`${messageStatus}`, 3);\r\n      } else {\r\n        message.error(`${messageStatus}`, 3);\r\n      }\r\n      setIsLoading(false);\r\n    });\r\n    return () =>\r\n      io.off(\"addfriendresponse\", ({ success, messageStatus }) => {\r\n        if (success) {\r\n          setClose(false);\r\n          message.success(`${messageStatus}`, 3);\r\n        } else {\r\n          message.error(`${messageStatus}`, 3);\r\n        }\r\n        setIsLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const submitHandler = (values) => {\r\n    setIsLoading(true);\r\n    io.emit(\"addfriend\", values);\r\n  };\r\n\r\n  return (\r\n    <div className=\"addfriend\">\r\n      <Modal visible onCancel={() => setClose(false)} footer={null}>\r\n        {isLoading ? (\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <Spin\r\n              indicator={<LoadingOutlined style={{ fontSize: 100 }} spin />}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <Form\r\n            name=\"normal_login\"\r\n            className=\"login-form-add\"\r\n            onFinish={submitHandler}\r\n          >\r\n            <Form.Item\r\n              name=\"email\"\r\n              rules={[\r\n                { required: true, message: \"Please input your Email!\" },\r\n                { type: \"email\", message: \"Please enter a valid Email\" },\r\n              ]}\r\n            >\r\n              <Input\r\n                prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                placeholder=\"Friend's E-mail\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"message\"\r\n              rules={[{ required: true, message: \"Please type a message\" }]}\r\n            >\r\n              <Input.TextArea\r\n                prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                placeholder=\"Type a message...\"\r\n                autoSize={{ minRows: 2, maxRows: 10 }}\r\n                maxLength={150}\r\n                showCount\r\n              />\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                className=\"login-form-button btn\"\r\n                style={{ marginTop: \"10px\" }}\r\n              >\r\n                Send\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        )}\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","R:\\advancedchatappfrontend\\src\\contexts\\SocketContext.js",[],"R:\\advancedchatappfrontend\\src\\components\\drawers\\notifications\\index.jsx",["217"],"import React from \"react\";\r\nimport { Drawer, Button } from \"antd\";\r\nimport { LeftOutlined } from \"@ant-design/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport Container from \"../../friendRequestBox/index\";\r\n\r\nconst Index = ({\r\n  setNotificationDrawer,\r\n  notificationDrawer,\r\n  friendRequests,\r\n  mWeb\r\n}) => {\r\n\r\n  const notificationHeader = (\r\n    <div style={{ display: \"flex\", alignContent: \"center\" }}>\r\n      <Button\r\n        onClick={() => setNotificationDrawer(false)}\r\n        type=\"text\"\r\n        icon={<LeftOutlined />}\r\n      />\r\n      <span style={{ alignSelf: \"center\", margin: \"0 auto\" }}>\r\n        Notifications\r\n      </span>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Drawer\r\n      title={notificationHeader}\r\n      placement=\"right\"\r\n      closable={false}\r\n      onClose={() => setNotificationDrawer(false)}\r\n      visible={notificationDrawer}\r\n      placement={\"left\"}\r\n      width={mWeb ? \"100%\" : \"30%\"}\r\n    >\r\n      {friendRequests?.data?.unmappedFriends?.map((item) => (\r\n        <Container userData={item} />\r\n      ))}\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  friendRequests: state.dashBoard.getUserFriends.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(Index);\r\n","R:\\advancedchatappfrontend\\src\\components\\friendRequestBox\\index.jsx",[],"R:\\advancedchatappfrontend\\src\\components\\drawers\\editProfile\\index.jsx",["218","219","220"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Drawer,\r\n  Button,\r\n  Image,\r\n  Switch,\r\n  Upload,\r\n  Input,\r\n  Skeleton,\r\n  message,\r\n} from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { editUser } from \"../../../screens/authorization/action\";\r\nimport \"./index.css\";\r\nimport { storage } from \"../../../lib/firebase/index\";\r\nimport { LeftOutlined, UploadOutlined } from \"@ant-design/icons\";\r\n\r\nconst Index = ({\r\n  setEditProfileDrawer,\r\n  editProfileDrawer,\r\n  getUserData,\r\n  editUser,\r\n  mWeb\r\n}) => {\r\n  const [edit, setEdit] = useState(null);\r\n  const [loading, setLoading] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [name, setName] = useState(null);\r\n  const [bio, setBio] = useState(\"\");\r\n  const [skelton, setSkelton] = useState(true);\r\n  const [fileList, updateFileList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (editProfileDrawer) {\r\n      setEdit(false);\r\n      setLoading(false);\r\n      setError(false);\r\n      setName(getUserData?.data?.data?.name);\r\n      setBio(getUserData?.data?.data?.about);\r\n    }\r\n  }, [editProfileDrawer]);\r\n\r\n  useEffect(() => {\r\n    if (editProfileDrawer) {\r\n      if (getUserData?.data?.data?.email) {\r\n        setLoading(false);\r\n        setEdit(false);\r\n      }\r\n    }\r\n  }, [getUserData]);\r\n\r\n  const handleName = (event) => {\r\n    const { value } = event.target;\r\n    if (name === \"\") {\r\n      setError(false);\r\n    } else if (value === \"\") {\r\n      setError(true);\r\n    }\r\n    setName(value);\r\n  };\r\n\r\n  const submitHandler = async () => {\r\n    if (error) {\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    const userDetails = {};\r\n    userDetails.name = name;\r\n    userDetails.about = bio;\r\n    if (fileList.length) {\r\n      const image = fileList[0].originFileObj;\r\n      const snapshot = await storage.ref(`/userImages/${uuidv4()}`).put(image);\r\n      const url = await snapshot.ref.getDownloadURL();\r\n      userDetails.user_image = url;\r\n    }\r\n    const prevImage = getUserData?.data?.data?.user_image;\r\n    await editUser(userDetails, async () => {\r\n      if (fileList[0]) {\r\n        const deleteRef = storage.refFromURL(prevImage);\r\n        await deleteRef.delete();\r\n        updateFileList([]);\r\n      }\r\n    });\r\n  };\r\n\r\n  const notificationHeader = (\r\n    <div style={{ display: \"flex\", alignContent: \"center\" }}>\r\n      <Button\r\n        onClick={() => setEditProfileDrawer(false)}\r\n        type=\"text\"\r\n        icon={<LeftOutlined />}\r\n      />\r\n      <span style={{ alignSelf: \"center\", margin: \"0 auto\" }}>\r\n        {edit ? \"Edit\" : \"My\"} Profile\r\n      </span>\r\n    </div>\r\n  );\r\n\r\n  const imageProps = {\r\n    fileList,\r\n    beforeUpload: (file) => {\r\n      if (\r\n        file.type !== \"image/png\" &&\r\n        file.type !== \"image/jpeg\" &&\r\n        file.type !== \"image/jpg\"\r\n      ) {\r\n        message.error(`Only png, jpg, jpeg are allowed.`, 3);\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    onChange: (info) => {\r\n      updateFileList(info.fileList.filter((file) => !!file.status));\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      title={notificationHeader}\r\n      placement=\"right\"\r\n      closable={false}\r\n      onClose={() => setEditProfileDrawer(false)}\r\n      visible={editProfileDrawer}\r\n      placement={\"left\"}\r\n      width={mWeb ? \"100%\" : \"30%\"}\r\n    >\r\n      {skelton && <Skeleton avatar paragraph={{ rows: 15 }} />}\r\n      <div\r\n        style={{\r\n          opacity: skelton ? 0 : 1,\r\n        }}\r\n        className=\"profileDrawer\"\r\n      >\r\n        <div className=\"switch\">\r\n          <Switch\r\n            checked={edit}\r\n            defaultChecked\r\n            checkedChildren=\"Edit Profile\"\r\n            unCheckedChildren=\"My Profile\"\r\n            onChange={(checked) => setEdit(checked)}\r\n          />\r\n        </div>\r\n        <div className=\"userdetails\">\r\n          <Image\r\n            width={200}\r\n            src={getUserData?.data?.data?.user_image}\r\n            onLoadCapture={() => setSkelton(false)}\r\n          />\r\n          <span>\r\n            <span style={{ color: \"red\" }}>@</span>\r\n            {getUserData?.data?.data?.email}\r\n          </span>\r\n        </div>\r\n        {edit && (\r\n          <div className=\"upload\">\r\n            <Upload {...imageProps} listType=\"picture\" maxCount={1}>\r\n              <Button icon={<UploadOutlined />}>Upload Avatar</Button>\r\n            </Upload>\r\n          </div>\r\n        )}\r\n        <div className=\"editable\">\r\n          {edit ? (\r\n            <>\r\n              <Input\r\n                value={name}\r\n                placeholder=\"Name\"\r\n                required\r\n                onChange={(event) => handleName(event)}\r\n              />\r\n              <span style={{ opacity: error ? 1 : 0 }} className=\"error\">\r\n                *Name Cannot be empty\r\n              </span>\r\n              <Input.TextArea\r\n                placeholder=\"About Yourself\"\r\n                showCount={edit}\r\n                maxLength={200}\r\n                autoSize={{ minRows: 2, maxRows: 20 }}\r\n                value={bio}\r\n                onChange={(event) => setBio(event.target.value)}\r\n              ></Input.TextArea>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <span className=\"username\">{getUserData?.data?.name}</span>\r\n              <blockquote>\r\n                {getUserData?.data?.data?.about?.length\r\n                  ? `\"${getUserData?.data?.data?.about}\"`\r\n                  : \"\"}\r\n              </blockquote>\r\n            </>\r\n          )}\r\n        </div>\r\n        {edit && (\r\n          <div className=\"btncnter\">\r\n            <Button\r\n              onClick={submitHandler}\r\n              type=\"primary\"\r\n              className=\"btn\"\r\n              loading={loading}\r\n            >\r\n              Update\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  getUserData: state.getUserDetails,\r\n});\r\n\r\nexport default connect(mapStateToProps, { editUser })(React.memo(Index));\r\n","R:\\advancedchatappfrontend\\src\\components\\drawers\\changePassword\\index.jsx",["221","222"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Drawer, Button, Form, Input, message } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport { changePassword } from \"../../../screens/dashboard/action\";\r\n\r\nimport { LeftOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nconst Index = ({\r\n  setChangePasswordDrawer,\r\n  changePasswordDrawer,\r\n  changePassword,\r\n  changePasswordStatus,\r\n  mWeb\r\n}) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const formRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (changePasswordStatus?.error) {\r\n      if (changePasswordStatus?.data?.data?.message) {\r\n        message.error(`${changePasswordStatus?.data?.data?.message}`);\r\n        setLoading(false);\r\n        formRef.current?.resetFields();\r\n      }\r\n    } else {\r\n      if (typeof changePasswordStatus?.data?.success !== \"undefined\") {\r\n        if (changePasswordStatus?.data?.success) {\r\n          message.success(\"Password Changed\");\r\n          setChangePasswordDrawer(false);\r\n        } else {\r\n          message.error(`${changePasswordStatus?.data?.data?.message}`);\r\n        }\r\n        setLoading(false);\r\n        formRef.current?.resetFields();\r\n      }\r\n    }\r\n  }, [changePasswordStatus]);\r\n\r\n  const submitHandler = async (values) => {\r\n    setLoading(true);\r\n    const formData = { ...values };\r\n    formData.confirmPassword = undefined;\r\n    await changePassword(formData);\r\n  };\r\n\r\n  const notificationHeader = (\r\n    <div style={{ display: \"flex\", alignContent: \"center\" }}>\r\n      <Button\r\n        onClick={() => setChangePasswordDrawer(false)}\r\n        type=\"text\"\r\n        icon={<LeftOutlined />}\r\n      />\r\n      <span style={{ alignSelf: \"center\", margin: \"0 auto\" }}>\r\n        Change Password\r\n      </span>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Drawer\r\n      className=\"changePassword\"\r\n      title={notificationHeader}\r\n      placement=\"right\"\r\n      closable={false}\r\n      onClose={() => {\r\n        formRef.current?.resetFields();\r\n        setChangePasswordDrawer(false);\r\n      }}\r\n      visible={changePasswordDrawer}\r\n      placement={\"left\"}\r\n      width={mWeb ? \"100%\" : \"30%\"}\r\n    >\r\n      <Form\r\n        ref={formRef}\r\n        onFinish={(values) => submitHandler(values)}\r\n        className=\"formC\"\r\n      >\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your Password!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input.Password\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            type=\"password\"\r\n            placeholder=\"Current Password\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"newPassword\"\r\n          rules={[\r\n            () => ({\r\n              validator(_, value) {\r\n                if (!value) {\r\n                  return Promise.reject(\"Please input your Password!\");\r\n                }\r\n                if (value.length < 6) {\r\n                  return Promise.reject(\"Minimum length of password must be 6\");\r\n                }\r\n                if (\r\n                  value.length > 0 &&\r\n                  (value[0] === \" \" || value[value.length - 1] === \" \")\r\n                ) {\r\n                  return Promise.reject(\r\n                    \"Password cannot start or end with spaces\"\r\n                  );\r\n                }\r\n                return Promise.resolve();\r\n              },\r\n            }),\r\n          ]}\r\n        >\r\n          <Input.Password\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            type=\"password\"\r\n            placeholder=\"New Password\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"confirmPassword\"\r\n          dependencies={[\"newPassword\"]}\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please confirm your password!\",\r\n            },\r\n            ({ getFieldValue }) => ({\r\n              validator(_, value) {\r\n                if (!value || getFieldValue(\"newPassword\") === value) {\r\n                  return Promise.resolve();\r\n                }\r\n\r\n                return Promise.reject(\r\n                  \"The two passwords that you entered do not match!\"\r\n                );\r\n              },\r\n            }),\r\n          ]}\r\n        >\r\n          <Input.Password\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            type=\"password\"\r\n            placeholder=\"Confirm Password\"\r\n          />\r\n        </Form.Item>\r\n        <div style={{ display: \"flex\" }}>\r\n          <Button\r\n            style={{ margin: \"0 auto\" }}\r\n            htmlType=\"submit\"\r\n            className=\"btn\"\r\n            type=\"primary\"\r\n            loading={loading}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nconst mapStatetoProps = (state) => ({\r\n  changePasswordStatus: state.dashBoard.changePassword,\r\n});\r\n\r\nexport default connect(mapStatetoProps, { changePassword })(React.memo(Index));\r\n","R:\\advancedchatappfrontend\\src\\lib\\firebase\\index.js",[],"R:\\advancedchatappfrontend\\src\\images\\index.js",[],["223","224"],"R:\\advancedchatappfrontend\\src\\screens\\dashboard\\reducer.js",[],"R:\\advancedchatappfrontend\\src\\screens\\dashboard\\actionTypes.js",[],"R:\\advancedchatappfrontend\\src\\screens\\dashboard\\action.js",[],"R:\\advancedchatappfrontend\\src\\components\\chatBubble\\index.jsx",[],"R:\\advancedchatappfrontend\\src\\components\\drawers\\editProfile\\freindDrawer.jsx",["225","226","227","228"],"import React, { useState, useEffect } from \"react\";\r\nimport { Drawer, Button, Image, Switch, Upload, Skeleton } from \"antd\";\r\nimport \"./index.css\";\r\nimport { LeftOutlined } from \"@ant-design/icons\";\r\n\r\nconst Index = ({ setEditProfileDrawer, editProfileDrawer, getUserData, mWeb }) => {\r\n  const [skelton, setSkelton] = useState(true);\r\n\r\n  const notificationHeader = (\r\n    <div style={{ display: \"flex\", alignContent: \"center\" }}>\r\n      <Button\r\n        onClick={() => setEditProfileDrawer(false)}\r\n        type=\"text\"\r\n        icon={<LeftOutlined />}\r\n      />\r\n      <span style={{ alignSelf: \"center\", margin: \"0 auto\" }}>\r\n        {getUserData?.data?.name} Profile\r\n      </span>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Drawer\r\n      title={notificationHeader}\r\n      placement=\"right\"\r\n      closable={false}\r\n      onClose={() => setEditProfileDrawer(false)}\r\n      visible={editProfileDrawer}\r\n      placement={\"left\"}\r\n      width={mWeb ? \"100%\" : \"30%\"}\r\n    >\r\n      {skelton && <Skeleton avatar paragraph={{ rows: 15 }} />}\r\n      <div\r\n        style={{\r\n          opacity: skelton ? 0 : 1,\r\n        }}\r\n        className=\"profileDrawer\"\r\n      >\r\n        <div className=\"userdetails\">\r\n          <Image\r\n            width={200}\r\n            src={getUserData?.data?.user_image}\r\n            onLoadCapture={() => setSkelton(false)}\r\n          />\r\n          <span>\r\n            <span style={{ color: \"red\" }}>@</span>\r\n            {getUserData?.data?.email}\r\n          </span>\r\n        </div>\r\n        <div className=\"editable\">\r\n          <span className=\"username\">{getUserData?.data?.name}</span>\r\n          <blockquote>\r\n            {getUserData?.data?.about?.length\r\n              ? `\"${getUserData?.data?.about}\"`\r\n              : \"\"}\r\n          </blockquote>\r\n        </div>\r\n      </div>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default React.memo(Index);\r\n","R:\\advancedchatappfrontend\\src\\screens\\errorPage\\index.jsx",[],"R:\\advancedchatappfrontend\\src\\components\\routes\\PrivateRoute\\index.jsx",[],"R:\\advancedchatappfrontend\\src\\components\\routes\\PublicRoute\\index.jsx",[],"R:\\advancedchatappfrontend\\src\\components\\Skeltons\\myheaderSkelton.jsx",[],"R:\\advancedchatappfrontend\\src\\components\\Skeltons\\chatRoom.jsx",[],"R:\\advancedchatappfrontend\\src\\components\\Skeltons\\userCard.jsx",[],"R:\\advancedchatappfrontend\\src\\components\\Skeltons\\ProfileHeader.jsx",[],"R:\\advancedchatappfrontend\\src\\screens\\authorization\\resetPassword\\index.jsx",["229","230","231"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Button, Form, Input, Spin, message, Modal } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { UserOutlined, LockOutlined, LoadingOutlined } from \"@ant-design/icons\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {\r\n  checkAvailable,\r\n  sendEmailOtp,\r\n  resetPassword,\r\n  clearResetData,\r\n} from \"../action\";\r\nimport \"./index.css\";\r\n\r\nfunction Index({\r\n  isLoading,\r\n  checkAvailable,\r\n  checkEmailStatus,\r\n  sendEmailOtp,\r\n  sendEmailOtpData,\r\n  resetPassword,\r\n  resetPasswordStatus,\r\n  clearResetData,\r\n  history,\r\n}) {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [toggle, setToggle] = useState(true);\r\n  const [loader, setLoader] = useState(false);\r\n  const [otpModal, setOtpModal] = useState(false);\r\n  const [curOtp, setCurOtp] = useState(\"\");\r\n  const otpField = useRef();\r\n  const formRef = useRef();\r\n\r\n  const submitHandler = async () => {\r\n    setLoader(true);\r\n    await checkAvailable({ email });\r\n  };\r\n\r\n  const sendOtp = async () => {\r\n    setOtpModal(true);\r\n    await sendEmailOtp({ email });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!checkEmailStatus?.isLoading) {\r\n      if (typeof checkEmailStatus?.data?.data !== \"undefined\") {\r\n        if (checkEmailStatus?.data?.data?.isAvailable) {\r\n          sendOtp();\r\n        } else {\r\n          message.error(\"Email is not registered\", 5);\r\n        }\r\n        setLoader(false);\r\n      }\r\n    }\r\n  }, [checkEmailStatus]);\r\n\r\n  const finalSubmit = async (values) => {\r\n    setLoader(true);\r\n    const data = { ...values };\r\n    data.confirmPassword = undefined;\r\n    data.email = email;\r\n    await resetPassword(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!resetPasswordStatus?.isLoading) {\r\n      if (typeof resetPasswordStatus?.data?.data !== \"undefined\") {\r\n        if (resetPasswordStatus?.data?.success) {\r\n          message.success(\r\n            \"Password Reset successfully, Redirecting to login Page\",\r\n            2\r\n          );\r\n          setTimeout(() => {\r\n            clearResetData();\r\n            history.push(\"/login\");\r\n          }, 3000);\r\n        } else {\r\n          message.error(\"There was some problem, try again\", 2);\r\n          setLoader(false);\r\n          formRef.current?.resetFields();\r\n        }\r\n      }\r\n    }\r\n  }, [resetPasswordStatus]);\r\n\r\n  const hashCode = (s) => {\r\n    return s.split(\"\").reduce(function (a, b) {\r\n      a = (a << 5) - a + b.charCodeAt(0);\r\n      return a & a;\r\n    }, 0);\r\n  };\r\n\r\n  const registerSubmitHandler = async () => {\r\n    const otpEntered = otpField.current.state.value;\r\n    if (!otpEntered || !otpEntered.length) {\r\n      message.error(\"Please Enter your One-Time Password\");\r\n    } else if (hashCode(otpEntered) !== curOtp) {\r\n      message.error(\"Entered One-Time Password is Wrong, Try again\");\r\n    } else if (hashCode(otpEntered) === curOtp) {\r\n      setOtpModal(false);\r\n      setToggle(!toggle);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (sendEmailOtpData?.data?.success && otpModal) {\r\n      message.success(`One Time Password Send to ${email}`, 3);\r\n      setCurOtp(sendEmailOtpData?.data?.data?.OTP);\r\n    }\r\n  }, [sendEmailOtpData]);\r\n\r\n  const antIcon = <LoadingOutlined style={{ fontSize: 100 }} spin />;\r\n\r\n  return isLoading ? (\r\n    <div className=\"container\">\r\n      <Spin indicator={antIcon} />\r\n    </div>\r\n  ) : (\r\n    <>\r\n      {otpModal && (\r\n        <Modal\r\n          className=\"registerModal\"\r\n          footer={null}\r\n          visible={otpModal}\r\n          onCancel={() => {\r\n            setOtpModal(false);\r\n            setLoader(false);\r\n          }}\r\n        >\r\n          {sendEmailOtpData?.loading ? (\r\n            <div className=\"centerAlign\">\r\n              <Spin\r\n                indicator={<LoadingOutlined style={{ fontSize: 30 }} size />}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <Input\r\n                placeholder=\"Enter 6-digit OTP\"\r\n                bordered={false}\r\n                maxLength={6}\r\n                ref={otpField}\r\n              />\r\n              <Button\r\n                onClick={registerSubmitHandler}\r\n                className=\"btn\"\r\n                type=\"primary\"\r\n              >\r\n                Submit\r\n              </Button>\r\n            </>\r\n          )}\r\n        </Modal>\r\n      )}\r\n      <div className=\"centerForm\">\r\n        {toggle ? (\r\n          <Form\r\n            onFinish={submitHandler}\r\n            name=\"normal_login\"\r\n            className=\"login-form-login resetPage\"\r\n          >\r\n            <Form.Item\r\n              name=\"email\"\r\n              rules={[\r\n                { required: true, message: \"Please input your Email!\" },\r\n                { type: \"email\", message: \"Please enter valid Email!\" },\r\n              ]}\r\n            >\r\n              <Input\r\n                prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                placeholder=\"Email\"\r\n                value={email}\r\n                onChange={({ target }) => setEmail(target.value)}\r\n              />\r\n            </Form.Item>\r\n            <div>\r\n              <Button\r\n                style={{ width: \"100%\" }}\r\n                htmlType=\"submit\"\r\n                className=\"btn\"\r\n                type=\"primary\"\r\n                loading={loader}\r\n              >\r\n                Reset Password\r\n              </Button>\r\n              Or <NavLink to=\"/login\">login</NavLink>\r\n            </div>\r\n          </Form>\r\n        ) : (\r\n          <Form\r\n            onFinish={(values) => finalSubmit(values)}\r\n            name=\"password_login\"\r\n            className=\"login-form-login resetPage\"\r\n            ref={formRef}\r\n          >\r\n            <Form.Item\r\n              name=\"password\"\r\n              rules={[\r\n                () => ({\r\n                  validator(_, value) {\r\n                    if (!value) {\r\n                      return Promise.reject(\"Please input your Password!\");\r\n                    }\r\n                    if (value.length < 6) {\r\n                      return Promise.reject(\r\n                        \"Minimum length of password must be 6\"\r\n                      );\r\n                    }\r\n                    if (\r\n                      value.length > 0 &&\r\n                      (value[0] === \" \" || value[value.length - 1] === \" \")\r\n                    ) {\r\n                      return Promise.reject(\r\n                        \"Password cannot start or end with spaces\"\r\n                      );\r\n                    }\r\n                    return Promise.resolve();\r\n                  },\r\n                }),\r\n              ]}\r\n            >\r\n              <Input.Password\r\n                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                type=\"password\"\r\n                placeholder=\"New Password\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"confirmPassword\"\r\n              dependencies={[\"newPassword\"]}\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please confirm your password!\",\r\n                },\r\n                ({ getFieldValue }) => ({\r\n                  validator(_, value) {\r\n                    if (!value || getFieldValue(\"password\") === value) {\r\n                      return Promise.resolve();\r\n                    }\r\n\r\n                    return Promise.reject(\r\n                      \"The two passwords that you entered do not match!\"\r\n                    );\r\n                  },\r\n                }),\r\n              ]}\r\n            >\r\n              <Input.Password\r\n                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                type=\"password\"\r\n                placeholder=\"Confirm Password\"\r\n              />\r\n            </Form.Item>\r\n            <div>\r\n              <Button\r\n                style={{ width: \"100%\" }}\r\n                htmlType=\"submit\"\r\n                className=\"btn\"\r\n                type=\"primary\"\r\n                loading={loader}\r\n              >\r\n                Update Password\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  loginStatus: state.authentication.loginUser,\r\n  isLoading: state.setLoader.isLoading,\r\n  checkEmailStatus: state.authentication.checkAvailable,\r\n  sendEmailOtpData: state.authentication.sendEmailOtp,\r\n  resetPasswordStatus: state.authentication.resetPassword,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  checkAvailable,\r\n  sendEmailOtp,\r\n  resetPassword,\r\n  clearResetData,\r\n})(Index);\r\n",{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","severity":1,"message":"237","line":13,"column":8,"nodeType":"238","messageId":"239","endLine":13,"endColumn":17},{"ruleId":"236","severity":1,"message":"240","line":8,"column":9,"nodeType":"238","messageId":"239","endLine":8,"endColumn":25},{"ruleId":"241","severity":1,"message":"242","line":61,"column":6,"nodeType":"243","endLine":61,"endColumn":24,"suggestions":"244"},{"ruleId":"241","severity":1,"message":"245","line":97,"column":6,"nodeType":"243","endLine":97,"endColumn":22,"suggestions":"246"},{"ruleId":"247","severity":1,"message":"248","line":269,"column":3,"nodeType":"249","messageId":"250","endLine":269,"endColumn":15},{"ruleId":"241","severity":1,"message":"245","line":27,"column":6,"nodeType":"243","endLine":27,"endColumn":19,"suggestions":"251"},{"ruleId":"236","severity":1,"message":"252","line":1,"column":38,"nodeType":"238","messageId":"239","endLine":1,"endColumn":49},{"ruleId":"236","severity":1,"message":"253","line":1,"column":51,"nodeType":"238","messageId":"239","endLine":1,"endColumn":58},{"ruleId":"241","severity":1,"message":"254","line":37,"column":7,"nodeType":"255","endLine":37,"endColumn":36},{"ruleId":"241","severity":1,"message":"256","line":52,"column":6,"nodeType":"243","endLine":52,"endColumn":8,"suggestions":"257"},{"ruleId":"241","severity":1,"message":"258","line":58,"column":6,"nodeType":"243","endLine":58,"endColumn":20,"suggestions":"259"},{"ruleId":"241","severity":1,"message":"260","line":70,"column":6,"nodeType":"243","endLine":70,"endColumn":8,"suggestions":"261"},{"ruleId":"241","severity":1,"message":"262","line":83,"column":6,"nodeType":"243","endLine":83,"endColumn":19,"suggestions":"263"},{"ruleId":"264","severity":1,"message":"265","line":32,"column":9,"nodeType":"266","endLine":37,"endColumn":11},{"ruleId":"264","severity":1,"message":"265","line":55,"column":13,"nodeType":"266","endLine":60,"endColumn":15},{"ruleId":"241","severity":1,"message":"267","line":39,"column":6,"nodeType":"243","endLine":39,"endColumn":8,"suggestions":"268"},{"ruleId":"241","severity":1,"message":"269","line":61,"column":25,"nodeType":"238","endLine":61,"endColumn":32},{"ruleId":"236","severity":1,"message":"270","line":1,"column":27,"nodeType":"238","messageId":"239","endLine":1,"endColumn":36},{"ruleId":"236","severity":1,"message":"271","line":4,"column":10,"nodeType":"238","messageId":"239","endLine":4,"endColumn":16},{"ruleId":"236","severity":1,"message":"272","line":19,"column":10,"nodeType":"238","messageId":"239","endLine":19,"endColumn":18},{"ruleId":"264","severity":1,"message":"265","line":82,"column":11,"nodeType":"266","endLine":86,"endColumn":13},{"ruleId":"232","replacedBy":"273"},{"ruleId":"234","replacedBy":"274"},{"ruleId":"241","severity":1,"message":"275","line":34,"column":6,"nodeType":"243","endLine":34,"endColumn":8,"suggestions":"276"},{"ruleId":"277","severity":1,"message":"278","line":34,"column":7,"nodeType":"279","endLine":34,"endColumn":25},{"ruleId":"241","severity":1,"message":"280","line":42,"column":6,"nodeType":"243","endLine":42,"endColumn":25,"suggestions":"281"},{"ruleId":"241","severity":1,"message":"282","line":51,"column":6,"nodeType":"243","endLine":51,"endColumn":19,"suggestions":"283"},{"ruleId":"277","severity":1,"message":"278","line":125,"column":7,"nodeType":"279","endLine":125,"endColumn":25},{"ruleId":"241","severity":1,"message":"284","line":38,"column":6,"nodeType":"243","endLine":38,"endColumn":28,"suggestions":"285"},{"ruleId":"277","severity":1,"message":"278","line":71,"column":7,"nodeType":"279","endLine":71,"endColumn":25},{"ruleId":"232","replacedBy":"286"},{"ruleId":"234","replacedBy":"287"},{"ruleId":"236","severity":1,"message":"270","line":1,"column":27,"nodeType":"238","messageId":"239","endLine":1,"endColumn":36},{"ruleId":"236","severity":1,"message":"288","line":2,"column":33,"nodeType":"238","messageId":"239","endLine":2,"endColumn":39},{"ruleId":"236","severity":1,"message":"289","line":2,"column":41,"nodeType":"238","messageId":"239","endLine":2,"endColumn":47},{"ruleId":"277","severity":1,"message":"278","line":29,"column":7,"nodeType":"279","endLine":29,"endColumn":25},{"ruleId":"241","severity":1,"message":"290","line":54,"column":6,"nodeType":"243","endLine":54,"endColumn":24,"suggestions":"291"},{"ruleId":"241","severity":1,"message":"292","line":83,"column":6,"nodeType":"243","endLine":83,"endColumn":27,"suggestions":"293"},{"ruleId":"241","severity":1,"message":"294","line":109,"column":6,"nodeType":"243","endLine":109,"endColumn":24,"suggestions":"295"},"no-native-reassign",["296"],"no-negated-in-lhs",["297"],"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","'loggerMiddleware' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'formData.email' and 'otpModal'. Either include them or remove the dependency array.","ArrayExpression",["298"],"React Hook useEffect has a missing dependency: 'getUserDetails'. Either include it or remove the dependency array. If 'getUserDetails' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["299"],"no-dupe-keys","Duplicate key 'sendEmailOtp'.","ObjectExpression","unexpected",["300"],"'useCallback' is defined but never used.","'useMemo' is defined but never used.","React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","BinaryExpression","React Hook useEffect has missing dependencies: 'getUserData?.data?.data' and 'getUserFriends'. Either include them or remove the dependency array. If 'getUserFriends' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["301"],"React Hook useEffect has a missing dependency: 'friendsData?.data?.friendsList?.length'. Either include it or remove the dependency array.",["302"],"React Hook useEffect has a missing dependency: 'music'. Either include it or remove the dependency array.",["303"],"React Hook useEffect has missing dependencies: 'friendsData?.data?.friendsList' and 'getUserFriends'. Either include them or remove the dependency array. If 'getUserFriends' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["304"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'io'. Either include it or remove the dependency array.",["305"],"The ref value 'scrollBottomRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'scrollBottomRef.current' to a variable inside the effect, and use that variable in the cleanup function.","'useEffect' is defined but never used.","'Avatar' is defined but never used.","'isLogged' is defined but never used.",["296"],["297"],"React Hook useEffect has missing dependencies: 'io' and 'setClose'. Either include them or remove the dependency array. If 'setClose' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["306"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'getUserData?.data?.data?.about' and 'getUserData?.data?.data?.name'. Either include them or remove the dependency array. If 'setName' needs the current value of 'getUserData.data.data.name', you can also switch to useReducer instead of useState and read 'getUserData.data.data.name' in the reducer.",["307"],"React Hook useEffect has a missing dependency: 'editProfileDrawer'. Either include it or remove the dependency array.",["308"],"React Hook useEffect has a missing dependency: 'setChangePasswordDrawer'. Either include it or remove the dependency array. If 'setChangePasswordDrawer' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["309"],["296"],["297"],"'Switch' is defined but never used.","'Upload' is defined but never used.","React Hook useEffect has a missing dependency: 'sendOtp'. Either include it or remove the dependency array.",["310"],"React Hook useEffect has missing dependencies: 'clearResetData' and 'history'. Either include them or remove the dependency array. If 'clearResetData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["311"],"React Hook useEffect has missing dependencies: 'email' and 'otpModal'. Either include them or remove the dependency array.",["312"],"no-global-assign","no-unsafe-negation",{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},"Update the dependencies array to be: [formData.email, otpModal, sendEmailOtpData]",{"range":"343","text":"344"},"Update the dependencies array to be: [getUserDetails, registerStatus]",{"range":"345","text":"346"},"Update the dependencies array to be: [getUserDetails, loginStatus]",{"range":"347","text":"348"},"Update the dependencies array to be: [getUserData?.data?.data, getUserFriends]",{"range":"349","text":"350"},"Update the dependencies array to be: [friendsData?.data?.friendsList?.length, imageCounter]",{"range":"351","text":"352"},"Update the dependencies array to be: [music]",{"range":"353","text":"354"},"Update the dependencies array to be: [friendsData?.data?.friendsList, getUserData, getUserFriends]",{"range":"355","text":"356"},"Update the dependencies array to be: [io]",{"range":"357","text":"358"},"Update the dependencies array to be: [io, setClose]",{"range":"359","text":"360"},"Update the dependencies array to be: [editProfileDrawer, getUserData?.data?.data?.about, getUserData?.data?.data?.name]",{"range":"361","text":"362"},"Update the dependencies array to be: [editProfileDrawer, getUserData]",{"range":"363","text":"364"},"Update the dependencies array to be: [changePasswordStatus, setChangePasswordDrawer]",{"range":"365","text":"366"},"Update the dependencies array to be: [checkEmailStatus, sendOtp]",{"range":"367","text":"368"},"Update the dependencies array to be: [clearResetData, history, resetPasswordStatus]",{"range":"369","text":"370"},"Update the dependencies array to be: [email, otpModal, sendEmailOtpData]",{"range":"371","text":"372"},[1927,1945],"[formData.email, otpModal, sendEmailOtpData]",[2982,2998],"[getUserDetails, registerStatus]",[918,931],"[getUserDetails, loginStatus]",[1939,1941],"[getUserData?.data?.data, getUserFriends]",[2081,2095],"[friendsData?.data?.friendsList?.length, imageCounter]",[2393,2395],"[music]",[2739,2752],"[friendsData?.data?.friendsList, getUserData, getUserFriends]",[1167,1169],"[io]",[1058,1060],"[io, setClose]",[1124,1143],"[editProfileDrawer, getUserData?.data?.data?.about, getUserData?.data?.data?.name]",[1319,1332],"[editProfileDrawer, getUserData]",[1227,1249],"[changePasswordStatus, setChangePasswordDrawer]",[1458,1476],"[checkEmailStatus, sendOtp]",[2304,2325],"[clearResetData, history, resetPasswordStatus]",[3150,3168],"[email, otpModal, sendEmailOtpData]"]